* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  /* Spritesheet width */
  --ssw: 12;
  /* Spritesheet height */
  --ssh: 1;
  --step: calc(100% / var(--ssw));
  --background: white;
  --foreground: black;
}

html {
  font-size: 62.5%;
  box-sizing: border-box;
}

@media (max-width: 600px) {
  html {
    font-size: 56%;
  }
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: black;
    --foreground: white;
  }
}

body {
  font-size: 1.8rem;
  background: var(--background);
  color: var(--foreground);
  font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;
  font-weight: normal;
}

main {
  margin: 0 auto;
  width: 100%;
  padding: 0 1rem;
  max-width: 76rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
}

.window {
  width: 80vw;
  max-width: 32rem;
  aspect-ratio: 1;
  overflow: hidden;
  transform: scale(0.85);
  transition: transform 0.15s ease;
}

body.sit .window {
  transform: scale(1);
}

img {
  opacity: 0;
  transition: opacity 1s ease-in;
}

body.loaded img {
  opacity: 1;
  height: calc(100% * var(--ssh));
  animation: idle 0.8s steps(4, end) infinite;
}

body.loaded.sit img {
  animation: sit 0.6s steps(7, end) forwards;
}

@keyframes idle {
  to {
    transform: translateX(calc(-4 * var(--step)));
  }
}

@keyframes sit {
  from {
    transform: translateX(calc(-4 * var(--step)));
  }

  to {
    transform: translateX(calc(-11 * var(--step)));
  }
}

button {
  all: unset;
  transition: none;
}

body.loaded:not(.sit) button {
  cursor: pointer;
  color: orange;
  transition: color 5s linear 1s;
}

main:has(h1 button:hover) .window {
  transform: scale(1);
}
