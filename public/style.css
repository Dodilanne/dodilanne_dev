* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  /* Spritesheet width */
  --ssw: 12;
  /* Spritesheet height */
  --ssh: 1;
  --step: calc(100% / var(--ssw));
  --background: white;
  --foreground: black;
}

html {
  font-size: 62.5%;
  box-sizing: border-box;
}

h1 {
  text-align: center;
  font-size: 3.2rem;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: black;
    --foreground: white;
  }
}

header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 3rem 0;
}

header a {
  display: flex;
  align-items: center;
  cursor: pointer;
  transition: all 0.15s ease;
}

header a:has(svg) {
  border-radius: 100%;
}

header a:has(svg):hover {
  border-radius: 100%;
  box-shadow: 0 0 2em orange;
}

header a svg {
  width: 2rem;
  height: 2rem;
  object-fit: contain;
}

header a:hover {
  text-shadow: 0 0 2em orange;
  color: orange;
}

header a img {
  width: 2rem;
  height: 2rem;
  margin-right: 0.5rem;
  object-fit: contain;
}

footer {
  margin: 0 auto;
  padding: 3rem 2rem;
  text-align: center;
}

body {
  font-size: 1.8rem;
  background: var(--background);
  color: var(--foreground);
  font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;
  font-weight: normal;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  position: relative;
  padding: 0 2rem;
}

@media (min-width: 600px) {
  html {
    font-size: 56%;
  }

  body {
    padding: 0 3rem;
  }

  footer {
    padding: 3rem;
  }
}

main {
  width: 100%;
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.window {
  width: 80vw;
  max-width: 32rem;
  aspect-ratio: 1;
  overflow: hidden;
  transform: scale(0.85);
  transition: transform 0.15s ease;
  z-index: 1;
}

body.debug .window {
  border: solid 1px orange;
  overflow: visible;
}

body:has(.button:focus-within) .window {
  transform: scale(1);
}

main img {
  height: calc(100% * var(--ssh));
  animation: idle 0.8s steps(4, end) infinite;
}

body:has(.button:focus-within) main img {
  animation: sit 0.6s steps(7, end) forwards;
}

@keyframes idle {
  to {
    transform: translateX(calc(-4 * var(--step)));
  }
}

@keyframes sit {
  from {
    transform: translateX(calc(-4 * var(--step)));
  }

  to {
    transform: translateX(calc(-11 * var(--step)));
  }
}

a,
button {
  all: unset;
  transition: none;
}

.button:not(:focus-within) {
  cursor: pointer;
  color: orange;
  transition: color 5s linear 1s;
}

.button:focus-visible,
.button:hover {
  text-shadow: 0 0 1em orange;
}

main:has(h1 .button:hover) .window,
main:has(h1 .button:focus-visible) .window {
  transform: scale(1);
}
